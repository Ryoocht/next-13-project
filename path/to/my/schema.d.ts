/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/v1": {
    get: operations["AppGetHello"];
  };
  "/api/v1/health-check": {
    get: operations["HealthCheckCheck"];
  };
  "/api/v1/auth/admin": {
    post: operations["AuthAdminCreate"];
  };
  "/api/v1/auth/admin/login/start": {
    post: operations["AuthAdminLoginFirstStep"];
  };
  "/api/v1/auth/admin/login/confirm": {
    post: operations["AuthAdminLoginSecondStep"];
  };
  "/api/v1/auth/admin/me": {
    get: operations["AuthAdminMe"];
  };
  "/api/v1/auth/investors/sign-up/start/{email}": {
    put: operations["InvestorAuthSignUpFirstStep"];
  };
  "/api/v1/auth/investors/sign-up/confirm": {
    post: operations["InvestorAuthSignUpSecondStep"];
  };
  "/api/v1/auth/investors/sign-in": {
    post: operations["InvestorAuthSignIn"];
  };
  "/api/v1/auth/investors/retrieve/start/{email}": {
    put: operations["InvestorAuthRetrieveAccount"];
  };
  "/api/v1/auth/investors/retrieve/confirm": {
    put: operations["InvestorAuthConfirmRetrieve"];
  };
  "/api/v1/auth/investors/me": {
    get: operations["InvestorAuthGetMe"];
  };
  "/api/v1/investors": {
    patch: operations["InvestorUpdate"];
  };
  "/api/v1/admin/investors": {
    get: operations["AdminInvestorList"];
  };
  "/api/v1/admin/investors/{investorId}": {
    get: operations["AdminInvestorFindOne"];
    patch: operations["AdminInvestorUpdate"];
  };
  "/api/v1/files/upload/{rootFolder}": {
    get: operations["FileUploadImage"];
  };
  "/api/v1/files/download/resize": {
    get: operations["FileDownloadResize"];
  };
  "/api/v1/files/download": {
    get: operations["FileDownload"];
  };
  "/api/v1/investors/individual": {
    put: operations["IndividualInvestorUpdate"];
  };
  "/api/v1/admin/investors/individual/{investorId}": {
    patch: operations["AdminIndividualInvestorChangeSiDocumentStatus"];
  };
  "/api/v1/admin/investors/individual/{investorId}/ask-for-documents": {
    put: operations["AdminIndividualInvestorAskForDocuments"];
  };
  "/api/v1/investors/broker": {
    put: operations["BrokerInvestorUpdate"];
  };
  "/api/v1/admin/investors/broker/{investorId}": {
    patch: operations["AdminBrokerInvestorUpdateAfslFormStatus"];
  };
  "/api/v1/admin/investors/broker/{investorId}/ask-for-documents": {
    put: operations["AdminBrokerInvestorAskForDocuments"];
  };
  "/api/v1/investors/{investorId}/entities": {
    post: operations["InvestorEntityCreate"];
  };
  "/api/v1/investors/{investorId}/entities/{entityId}": {
    patch: operations["InvestorEntityUpdate"];
  };
  "/api/v1/admin/investors/{investorId}/entities": {
    post: operations["AdminInvestorEntityCreate"];
  };
  "/api/v1/admin/investors/{investorId}/entities/{entityId}": {
    patch: operations["AdminInvestorEntityUpdate"];
  };
  "/api/v1/admin/companies": {
    get: operations["AdminCompanyList"];
    post: operations["adminCompanyCreate"];
  };
  "/api/v1/admin/companies/{companyId}": {
    get: operations["AdminCompanyGetById"];
    patch: operations["AdminCompanyUpdate"];
  };
  "/api/v1/admin/investor-groups": {
    get: operations["AdminInvestorGroupList"];
    post: operations["AdminInvestorGroupCreate"];
  };
  "/api/v1/admin/investor-groups/{investorGroupId}/investors/{investorId}": {
    post: operations["AdminInvestorGroupAddInvestor"];
    delete: operations["AdminInvestorGroupRemoveInvestor"];
  };
  "/api/v1/admin/investor-groups/{investorGroupId}": {
    get: operations["AdminInvestorGroupGet"];
    delete: operations["AdminInvestorGroupDelete"];
    patch: operations["AdminInvestorGroupUpdate"];
  };
  "/api/v1/admin/deals": {
    get: operations["AdminDealList"];
    post: operations["AdminDealCreate"];
  };
  "/api/v1/admin/deals/{dealId}": {
    get: operations["AdminDealGetById"];
    patch: operations["AdminDealUpdate"];
  };
  "/api/v1/admin/deals/{dealId}/close/bids": {
    put: operations["AdminDealCloseBids"];
  };
  "/api/v1/investors/{investorId}/deals": {
    post: operations["InvestorDealList"];
  };
  "/api/v1/investors/{investorId}/deals/{dealId}": {
    get: operations["InvestorDealFind"];
  };
  "/api/v1/investors/{investorId}/deals/{dealId}/submit-interest": {
    put: operations["InvestorDealSubmitInterest"];
  };
  "/api/v1/admin/deals/{dealId}/logs": {
    get: operations["AdminDealLogList"];
  };
  "/api/v1/investors/{investorId}/deals/{dealId}/bids": {
    post: operations["BidCreate"];
  };
  "/api/v1/admin/investors/{investorId}/deals/{dealId}/bids": {
    post: operations["BidAdminCreate"];
  };
  "/api/v1/admin/investors/{investorId}/deals/{dealId}/bids/{bidId}": {
    put: operations["BidAdminUpdate"];
    delete: operations["BidAdminDelete"];
  };
  "/api/v1/investors/{investorId}/inboxes/deals": {
    get: operations["InvestorInboxList"];
  };
  "/api/v1/investors/{investorId}/inboxes/deals/{dealId}/accept": {
    put: operations["InvestorInboxAcceptTerms"];
  };
  "/api/v1/deals/{dealId}/allocation": {
    get: operations["DealAllocationFindOne"];
    put: operations["DealAllocationCreate"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BadRequestFromPipeDataDto: {
      statusCode: number;
      message: (string)[];
    };
    ErrorResponseBadRequestFromPipeDto: {
      data: components["schemas"]["BadRequestFromPipeDataDto"];
      message?: string;
      httpStatus: number;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      method: "POST" | "GET" | "PUT" | "PATCH" | "DELETE";
    };
    DataErrorPrismaNotFoundDto: {
      message: string;
    };
    ErrorResponsePrismaNotFoundDto: {
      data: components["schemas"]["DataErrorPrismaNotFoundDto"];
      message?: string;
      httpStatus: number;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      method: "POST" | "GET" | "PUT" | "PATCH" | "DELETE";
    };
    DataErrorPrismaConflictDto: {
      message: string;
    };
    ErrorResponsePrismaConflictDto: {
      data: components["schemas"]["DataErrorPrismaConflictDto"];
      message?: string;
      httpStatus: number;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      method: "POST" | "GET" | "PUT" | "PATCH" | "DELETE";
    };
    ErrorResponseInternalServerErrorDto: {
      message?: string;
      httpStatus: number;
      /** Format: date-time */
      timestamp: string;
      /** @enum {string} */
      method: "POST" | "GET" | "PUT" | "PATCH" | "DELETE";
    };
    CreatePhoneNumberDto: {
      /**
       * @description Phone number 
       * @example 0400000000
       */
      number: string;
      /**
       * @description Country code 
       * @example 61
       */
      countryCode: string;
    };
    AdminCreateDto: {
      email: string;
      firstName: string;
      middleName: string | null;
      lastName: string;
      title: string | null;
      picture: string | null;
      phoneNumber: components["schemas"]["CreatePhoneNumberDto"];
      password: string;
    };
    AdminLoginDto: {
      email: string;
      password: string;
    };
    UserPhoneNumberDto: {
      /**
       * @description Phone number 
       * @example 0400000000
       */
      number: string;
      /**
       * @description Country code 
       * @example 61
       */
      countryCode: string;
    };
    TwoFactorAuthenticationDto: {
      code: string;
      email: string;
    };
    UserDto: {
      id: string;
      email: string;
      firstName: string;
      middleName: string | null;
      lastName: string;
      title: string | null;
      picture: string | null;
      phoneNumber: components["schemas"]["UserPhoneNumberDto"];
    };
    AdminDto: {
      user: components["schemas"]["UserDto"];
    };
    AdminLoginSecondStepDto: {
      admin: components["schemas"]["AdminDto"];
      authenticationCode: string;
    };
    CreateUserDto: {
      email: string;
      phoneNumber: components["schemas"]["CreatePhoneNumberDto"];
      password: string;
      firstName: string;
      middleName: string | null;
      lastName: string;
      title: string | null;
      picture: string | null;
    };
    InvestorCreateDto: {
      user: components["schemas"]["CreateUserDto"];
      code: string;
    };
    InvestorDocumentDto: {
      id: string;
      name: string;
    };
    InvestorIdentificationDocumentDto: {
      document: components["schemas"]["InvestorDocumentDto"];
    };
    InvestorEntityBrokerDto: {
      name: string | null;
    };
    InvestorEntityBrokerIdentificationDto: {
      pid: string;
      broker: components["schemas"]["InvestorEntityBrokerDto"];
    };
    InvestorEntityDvpDto: {
      hin: string;
      brokerIdentification: components["schemas"]["InvestorEntityBrokerIdentificationDto"];
    };
    InvestorEntityDocumentDto: {
      id: string;
      name: string;
    };
    IndividualJointEntityIdentificationDocumentDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentDto"];
    };
    IndividualJointEntityDto: {
      title: string;
      name: string;
      middleName: string | null;
      surname: string;
      /** Format: date-time */
      birthday: string;
      countryPassport: string;
      identificationDocuments: (components["schemas"]["IndividualJointEntityIdentificationDocumentDto"])[];
    };
    CompanyEntityExtraDocumentDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentDto"];
    };
    CompanyEntityDirectorIdentificationDocumentDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentDto"];
    };
    CompanyEntityDirectorDetailDto: {
      name: string;
      /** Format: date-time */
      birthday: string;
      countryBirth: string;
      identificationDocuments: (components["schemas"]["CompanyEntityDirectorIdentificationDocumentDto"])[];
    };
    CompanyEntityDto: {
      /** @enum {string} */
      type: "Proprietary" | "Public" | "Private";
      name: string;
      tradingName: string;
      accountDesignation: string | null;
      abnNumber: string;
      extractDocuments: (components["schemas"]["CompanyEntityExtraDocumentDto"])[];
      directorDetail: components["schemas"]["CompanyEntityDirectorDetailDto"];
    };
    TrustEntityUboIdentificationDocumentDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentDto"];
    };
    TrustEntityUboDto: {
      id: string;
      name: string;
      /** Format: date-time */
      birthday: string;
      countryBirth: string;
      identificationDocuments: (components["schemas"]["TrustEntityUboIdentificationDocumentDto"])[];
    };
    TrustEntityDeedDocumentDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentDto"];
    };
    TrustEntityDto: {
      type: string;
      name: string;
      tradingName: string;
      accountDesignation: string | null;
      abnNumber: string;
      uboList: (components["schemas"]["TrustEntityUboDto"])[];
      deedDocuments: (components["schemas"]["TrustEntityDeedDocumentDto"])[];
    };
    InvestorEntityDto: {
      /** @enum {string} */
      type: "IndividualJoint" | "Company" | "SuperTrust";
      address: string;
      id: string;
      isApproved: boolean;
      ccEmail: string;
      taxFile: string | null;
      finclearAccountNumber: string | null;
      primaryCountry: string;
      dvp: components["schemas"]["InvestorEntityDvpDto"];
      individualEntity?: components["schemas"]["IndividualJointEntityDto"];
      companyEntity?: components["schemas"]["CompanyEntityDto"];
      trustEntity?: components["schemas"]["TrustEntityDto"];
    };
    SophisticatedInvestorDocumentDto: {
      isApproved: boolean;
      /** Format: date-time */
      expiresAt: string;
      document?: components["schemas"]["InvestorDocumentDto"];
    };
    IndividualInvestorDto: {
      sophisticatedInvestorDocument?: components["schemas"]["SophisticatedInvestorDocumentDto"];
    };
    AfslFormDocumentDto: {
      isApproved: boolean;
      /** Format: date-time */
      expiresAt: string;
      document: components["schemas"]["InvestorDocumentDto"];
    };
    BrokerInvestorDto: {
      afslFormDocument: components["schemas"]["AfslFormDocumentDto"];
    };
    InvestorDto: {
      rating: number;
      /** @enum {string} */
      status: "Approved" | "Pending" | "Restrict";
      investmentMinSize: number | null;
      investmentMaxSize: number | null;
      isIdentificationDocumentApproved: boolean;
      isApproved: boolean;
      identificationDocuments: (components["schemas"]["InvestorIdentificationDocumentDto"])[];
      entities: (components["schemas"]["InvestorEntityDto"])[];
      user: components["schemas"]["UserDto"];
      individualInvestor?: components["schemas"]["IndividualInvestorDto"];
      brokerInvestor?: components["schemas"]["BrokerInvestorDto"];
    };
    InvestorSignInResultDto: {
      investor: components["schemas"]["InvestorDto"];
      authenticationCode: string;
    };
    InvestorSignInDto: {
      email: string;
      password: string;
    };
    InvestorSetNewPasswordDto: {
      code: string;
      email: string;
      password: string;
    };
    InvestorDocumentCreateDto: {
      name: string;
    };
    InvestorIdentificationDocumentCreateDto: {
      document: components["schemas"]["InvestorDocumentCreateDto"];
    };
    InvestorUpdateDto: {
      identificationDocuments?: (components["schemas"]["InvestorIdentificationDocumentCreateDto"])[];
    };
    InvestorBidEntityAdminResultDto: {
      investmentAmount: number;
      bidId: string;
      investorEntityId: string;
      isAllocated: boolean;
    };
    InvestorEntitiesAdminResultDto: {
      /** @enum {string} */
      type: "IndividualJoint" | "Company" | "SuperTrust";
      /** @description This field will exist only if the "addDealId" filter has been applied. */
      bids?: (components["schemas"]["InvestorBidEntityAdminResultDto"])[];
      address: string;
      id: string;
      isApproved: boolean;
      ccEmail: string;
      taxFile: string | null;
      finclearAccountNumber: string | null;
      primaryCountry: string;
      dvp: components["schemas"]["InvestorEntityDvpDto"];
      individualEntity?: components["schemas"]["IndividualJointEntityDto"];
      companyEntity?: components["schemas"]["CompanyEntityDto"];
      trustEntity?: components["schemas"]["TrustEntityDto"];
    };
    InvestorAdminResultDto: {
      rating: number;
      /** @enum {string} */
      status: "Approved" | "Pending" | "Restrict";
      investmentMinSize: number | null;
      investmentMaxSize: number | null;
      isIdentificationDocumentApproved: boolean;
      entities: (components["schemas"]["InvestorEntitiesAdminResultDto"])[];
      isApproved: boolean;
      identificationDocuments: (components["schemas"]["InvestorIdentificationDocumentDto"])[];
      user: components["schemas"]["UserDto"];
      individualInvestor?: components["schemas"]["IndividualInvestorDto"];
      brokerInvestor?: components["schemas"]["BrokerInvestorDto"];
    };
    ResultPaginationDetailDto: {
      total: number;
      lastPage: number;
      currentPage: number;
      perPage: number;
      from: number;
      to: number;
    };
    InvestorListAdminResultDto: {
      data: (components["schemas"]["InvestorAdminResultDto"])[];
      pagination: components["schemas"]["ResultPaginationDetailDto"];
    };
    InvestorAdminUpdateDto: {
      rating?: number;
      /** @enum {string} */
      status?: "Approved" | "Pending" | "Restrict";
      isIdentificationDocumentApproved?: boolean;
      identificationDocuments?: (components["schemas"]["InvestorIdentificationDocumentCreateDto"])[];
      isApproved?: boolean;
    };
    FileResponseDto: {
      /** @description Url to upload or download file */
      url: string;
      /** @description New file name */
      fileName: string;
    };
    SophisticatedInvestorDocumentCreateDto: {
      document: components["schemas"]["InvestorDocumentCreateDto"];
    };
    IndividualInvestorUpdateDto: {
      sophisticatedInvestorDocument: components["schemas"]["SophisticatedInvestorDocumentCreateDto"];
    };
    SophisticatedInvestorAdminUpdateDocumentDto: {
      document: components["schemas"]["InvestorDocumentCreateDto"];
      /** Format: date-time */
      expiresAt?: string;
      isApproved?: boolean;
    };
    IndividualInvestorAdminUpdateDto: {
      sophisticatedDocument?: components["schemas"]["SophisticatedInvestorAdminUpdateDocumentDto"];
    };
    IndividualInvestorAskDocumentsDto: {
      siForm?: boolean;
      askIdentificationDocument?: boolean;
    };
    AfslFormDocumentCreateDto: {
      document: components["schemas"]["InvestorDocumentCreateDto"];
    };
    BrokerInvestorUpdateDto: {
      afslFormDocument: components["schemas"]["AfslFormDocumentCreateDto"];
    };
    AfslFormDocumentAdminUpdateDto: {
      document: components["schemas"]["InvestorDocumentCreateDto"];
      /** Format: date-time */
      expiresAt?: string;
      isApproved?: boolean;
    };
    BrokerInvestorAdminUpdateDto: {
      afslFormDocument: components["schemas"]["AfslFormDocumentAdminUpdateDto"];
    };
    BrokerInvestorAskDocumentsDto: {
      afslForm?: boolean;
      askIdentificationDocument?: boolean;
    };
    InvestorEntityDvpCreateDto: {
      hin: string;
      brokerPid: string;
    };
    InvestorEntityDocumentCreateDto: {
      name: string;
    };
    TrustEntityDeedDocumentCreateDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentCreateDto"];
    };
    TrustEntityUboIdentificationDocumentCreateDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentCreateDto"];
    };
    TrustEntityUboCreateDto: {
      identificationDocuments: (components["schemas"]["TrustEntityUboIdentificationDocumentCreateDto"])[];
      name: string;
      /** Format: date-time */
      birthday: string;
      countryBirth: string;
    };
    TrustEntityCreateDto: {
      deedDocuments: (components["schemas"]["TrustEntityDeedDocumentCreateDto"])[];
      uboList: (components["schemas"]["TrustEntityUboCreateDto"])[];
      type: string;
      name: string;
      tradingName: string;
      accountDesignation: string | null;
      abnNumber: string;
    };
    IndividualJointEntityDocumentCreateDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentCreateDto"];
    };
    IndividualJointEntityCreateDto: {
      identificationDocuments: (components["schemas"]["IndividualJointEntityDocumentCreateDto"])[];
      title: string;
      name: string;
      middleName: string | null;
      surname: string;
      /** Format: date-time */
      birthday: string;
      countryPassport: string;
    };
    CompanyEntityExtraDocumentCreateDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentCreateDto"];
    };
    CompanyEntityDirectorIdentificationDocumentCreateDto: {
      investorEntityDocument: components["schemas"]["InvestorEntityDocumentCreateDto"];
    };
    CompanyEntityDirectorDetailCreateDto: {
      identificationDocuments: (components["schemas"]["CompanyEntityDirectorIdentificationDocumentCreateDto"])[];
      name: string;
      /** Format: date-time */
      birthday: string;
      countryBirth: string;
    };
    CompanyEntityCreateDto: {
      /** @enum {string} */
      type: "Proprietary" | "Public" | "Private";
      extractDocuments: (components["schemas"]["CompanyEntityExtraDocumentCreateDto"])[];
      directorDetail: components["schemas"]["CompanyEntityDirectorDetailCreateDto"];
      name: string;
      tradingName: string;
      accountDesignation: string | null;
      abnNumber: string;
    };
    InvestorEntityCreateDto: {
      /** @enum {string} */
      type: "IndividualJoint" | "Company" | "SuperTrust";
      address: string;
      ccEmail: string;
      taxFile: string | null;
      primaryCountry: string;
      dvp: components["schemas"]["InvestorEntityDvpCreateDto"];
      trustEntity?: components["schemas"]["TrustEntityCreateDto"];
      individualEntity?: components["schemas"]["IndividualJointEntityCreateDto"];
      companyEntity?: components["schemas"]["CompanyEntityCreateDto"];
    };
    InvestorEntityDvpUpdateDto: {
      hin?: string;
      brokerPid?: string;
    };
    TrustEntityUboUpdateDto: {
      identificationDocuments: (components["schemas"]["TrustEntityUboIdentificationDocumentCreateDto"])[];
      name: string;
      /** Format: date-time */
      birthday: string;
      countryBirth: string;
      id?: string;
    };
    TrustEntityUpdateDto: {
      uboList?: (components["schemas"]["TrustEntityUboUpdateDto"])[];
      deletedUboIds?: (string)[];
      type?: string;
      name?: string;
      tradingName?: string;
      accountDesignation?: string | null;
      abnNumber?: string;
      deedDocuments?: (components["schemas"]["TrustEntityDeedDocumentCreateDto"])[];
    };
    IndividualJointEntityUpdateDto: {
      title?: string;
      name?: string;
      middleName?: string | null;
      surname?: string;
      /** Format: date-time */
      birthday?: string;
      countryPassport?: string;
      identificationDocuments?: (components["schemas"]["IndividualJointEntityDocumentCreateDto"])[];
    };
    CompanyEntityDirectorDetailUpdateDto: {
      name?: string;
      /** Format: date-time */
      birthday?: string;
      countryBirth?: string;
      identificationDocuments?: (components["schemas"]["CompanyEntityDirectorIdentificationDocumentCreateDto"])[];
    };
    CompanyEntityUpdateDto: {
      /** @enum {string} */
      type?: "Proprietary" | "Public" | "Private";
      directorDetail?: components["schemas"]["CompanyEntityDirectorDetailUpdateDto"];
      isApproved?: boolean;
      name?: string;
      tradingName?: string;
      accountDesignation?: string | null;
      abnNumber?: string;
      extractDocuments?: (components["schemas"]["CompanyEntityExtraDocumentCreateDto"])[];
    };
    InvestorEntityUpdateDto: {
      /** @enum {string} */
      type?: "IndividualJoint" | "Company" | "SuperTrust";
      address?: string;
      ccEmail?: string;
      taxFile?: string | null;
      primaryCountry?: string;
      dvp?: components["schemas"]["InvestorEntityDvpUpdateDto"];
      trustEntity?: components["schemas"]["TrustEntityUpdateDto"];
      individualEntity?: components["schemas"]["IndividualJointEntityUpdateDto"];
      companyEntity?: components["schemas"]["CompanyEntityUpdateDto"];
    };
    InvestorEntityAdminCreateDto: {
      /** @enum {string} */
      type: "IndividualJoint" | "Company" | "SuperTrust";
      address: string;
      ccEmail: string;
      taxFile: string | null;
      finclearAccountNumber: string | null;
      primaryCountry: string;
      dvp: components["schemas"]["InvestorEntityDvpCreateDto"];
      trustEntity?: components["schemas"]["TrustEntityCreateDto"];
      individualEntity?: components["schemas"]["IndividualJointEntityCreateDto"];
      companyEntity?: components["schemas"]["CompanyEntityCreateDto"];
    };
    InvestorEntityAdminUpdateDto: {
      /** @enum {string} */
      type: "IndividualJoint" | "Company" | "SuperTrust";
      dvp?: components["schemas"]["InvestorEntityDvpUpdateDto"];
      trustEntity?: components["schemas"]["TrustEntityUpdateDto"];
      individualEntity?: components["schemas"]["IndividualJointEntityUpdateDto"];
      companyEntity?: components["schemas"]["CompanyEntityUpdateDto"];
      address?: string;
      isApproved?: boolean;
      ccEmail?: string;
      taxFile?: string | null;
      finclearAccountNumber?: string | null;
      primaryCountry?: string;
    };
    CreateAsxCompanyCreateDto: {
      code: string;
    };
    CompanyCreateDto: {
      logo?: string;
      asxCompany?: components["schemas"]["CreateAsxCompanyCreateDto"];
      name: string;
      industry: string;
    };
    CompanyAsxUpdateDto: {
      code?: string;
    };
    CompanyUpdateDto: {
      asxCompany?: components["schemas"]["CompanyAsxUpdateDto"];
      name?: string;
      industry?: string;
      logo?: string | null;
    };
    CompanyAsxDto: {
      code: string;
    };
    CompanyDto: {
      id: string;
      name: string;
      industry: string;
      logo: string | null;
      asxCompany: components["schemas"]["CompanyAsxDto"];
    };
    CompanyListResultDto: {
      data: (components["schemas"]["CompanyDto"])[];
      pagination: components["schemas"]["ResultPaginationDetailDto"];
    };
    AdminCreateInvestorGroupDto: {
      name: string;
    };
    AdminUpdateInvestorGroupDto: {
      name?: string;
    };
    InvestorGroupDto: {
      id: string;
      name: string;
    };
    InvestorGroupListResultDto: {
      data: (components["schemas"]["InvestorGroupDto"])[];
      pagination: components["schemas"]["ResultPaginationDetailDto"];
    };
    DealDocumentCreateDto: {
      name: string;
    };
    DealBehindWallDocumentCreateDto: {
      dealDocument: components["schemas"]["DealDocumentCreateDto"];
    };
    DealBehindWallCreateDto: {
      documents?: (components["schemas"]["DealBehindWallDocumentCreateDto"])[];
      detail: string | null;
      terms: string | null;
    };
    DealInformationDocumentCreateDto: {
      dealDocument: components["schemas"]["DealDocumentCreateDto"];
    };
    DealOptionCreateDto: {
      exercisePrice: number | null;
      numerator: number | null;
      denominator: number | null;
      /** Format: date-time */
      expiresAt: string | null;
      detail: string | null;
    };
    DealExtraDetailDto: {
      minimumBid: number | null;
      id: string;
      companyDescription: string | null;
      investmentHighlights: string | null;
      summaryContinued: string | null;
      useProceeds: string | null;
    };
    DealDateCreateDto: {
      /** Format: date-time */
      bidDate: string | null;
      /** Format: date-time */
      bidTime: string | null;
      /** Format: date-time */
      settlementDate: string | null;
    };
    Deal180IpoDocumentCreateDto: {
      /** @enum {string} */
      type: "TermSheets" | "IpoPresentation" | "IpoProspectus";
      dealDocument: components["schemas"]["DealDocumentCreateDto"];
    };
    Deal180IpoCreateDto: {
      ipoPrice: number | null;
      ipoRaiseAmount: number | null;
      marketCap: number | null;
      dealOption?: components["schemas"]["DealOptionCreateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailDto"];
      keyDate?: components["schemas"]["DealDateCreateDto"];
      documents?: (components["schemas"]["Deal180IpoDocumentCreateDto"])[];
      summary: string | null;
      hasLeadBroker: boolean;
      brokerName: string | null;
      /** Format: date-time */
      listingDate: string | null;
      /** Format: date-time */
      closeDate: string | null;
    };
    DealExtraDetailCreateDto: {
      minimumBid: number | null;
      companyDescription: string | null;
      investmentHighlights: string | null;
      summaryContinued: string | null;
      useProceeds: string | null;
    };
    Deal180UnlistedDocumentCreateDto: {
      /** @enum {string} */
      type: "TermSheets" | "PreIpoPresentation";
      dealDocument: components["schemas"]["DealDocumentCreateDto"];
    };
    Deal180UnlistedCreateDto: {
      preIpoPrice: number;
      preIpoRaiseAmount: number;
      valuation: number | null;
      dealOption?: components["schemas"]["DealOptionCreateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailCreateDto"];
      keyDate?: components["schemas"]["DealDateCreateDto"];
      documents?: (components["schemas"]["Deal180UnlistedDocumentCreateDto"])[];
      summary: string | null;
      hasLeadBroker: boolean;
      brokerName: string | null;
      /** Format: date-time */
      closeDate: string | null;
    };
    Deal180PlacementDocumentCreateDto: {
      /** @enum {string} */
      type: "TermSheets";
      dealDocument: components["schemas"]["DealDocumentCreateDto"];
    };
    Deal180PlacementCreateDto: {
      capitalRaisePrice: number;
      lastTradedPrice: number | null;
      marketCap: number | null;
      discountPercentage: number | null;
      dealOption?: components["schemas"]["DealOptionCreateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailCreateDto"];
      keyDate?: components["schemas"]["DealDateCreateDto"];
      documents?: (components["schemas"]["Deal180PlacementDocumentCreateDto"])[];
      summary: string | null;
      optionCode: string | null;
    };
    DealMarketPlacementCreateDto: {
      lastTradedPrice: number | null;
    };
    InvestorGroupConnectDto: {
      id: string;
    };
    DealInvestorGroupCreateDto: {
      investorGroup: components["schemas"]["InvestorGroupConnectDto"];
    };
    DealCreateDto: {
      /** @enum {string} */
      type: "Placement" | "MarketPlacement" | "Ipo" | "UnlistedInvestment";
      companyId: string;
      behindWallDeal?: components["schemas"]["DealBehindWallCreateDto"];
      dealInformationDocuments: (components["schemas"]["DealInformationDocumentCreateDto"])[];
      ipoDeal?: components["schemas"]["Deal180IpoCreateDto"];
      unlistedDeal?: components["schemas"]["Deal180UnlistedCreateDto"];
      placementDeal?: components["schemas"]["Deal180PlacementCreateDto"];
      marketPlacementDeal?: components["schemas"]["DealMarketPlacementCreateDto"];
      dealInvestorGroups?: (components["schemas"]["DealInvestorGroupCreateDto"])[];
      isActive: boolean;
    };
    DealDocumentDto: {
      id: string;
      name: string;
    };
    DealInformationDocumentDto: {
      dealDocument: components["schemas"]["DealDocumentDto"];
    };
    DealBehindWallDocumentDto: {
      dealDocument: components["schemas"]["DealDocumentDto"];
    };
    DealInvestorAgreeBehindWallTermsDto: {
      investorId: string;
    };
    DealBehindWallDto: {
      detail: string | null;
      terms: string | null;
      isActive: boolean;
      documents: (components["schemas"]["DealBehindWallDocumentDto"])[];
      investorsAgreedTerms?: (components["schemas"]["DealInvestorAgreeBehindWallTermsDto"])[];
    };
    DealOptionDto: {
      exercisePrice: number | null;
      id: string;
      numerator: number | null;
      denominator: number | null;
      /** Format: date-time */
      expiresAt: string | null;
      detail: string | null;
    };
    DealDateDto: {
      id: string;
      /** Format: date-time */
      bidDate: string | null;
      /** Format: date-time */
      bidTime: string | null;
      /** Format: date-time */
      settlementDate: string | null;
    };
    Deal180IpoDocumentDto: {
      /** @enum {string} */
      type: "TermSheets" | "IpoPresentation" | "IpoProspectus";
      dealDocument: components["schemas"]["DealDocumentDto"];
    };
    Deal180IpoDto: {
      ipoPrice: number | null;
      ipoRaiseAmount: number | null;
      marketCap: number | null;
      valueToBroker: number;
      summary: string | null;
      hasLeadBroker: boolean;
      brokerName: string | null;
      /** Format: date-time */
      listingDate: string | null;
      /** Format: date-time */
      closeDate: string | null;
      dealOption?: components["schemas"]["DealOptionDto"];
      keyDate?: components["schemas"]["DealDateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailDto"];
      documents: (components["schemas"]["Deal180IpoDocumentDto"])[];
    };
    Deal180UnlistedDocumentDto: {
      /** @enum {string} */
      type: "TermSheets" | "PreIpoPresentation";
      dealDocument: components["schemas"]["DealDocumentDto"];
    };
    Deal180UnlistedDto: {
      preIpoPrice: number;
      preIpoRaiseAmount: number;
      valuation: number | null;
      valueToBroker: number;
      summary: string | null;
      hasLeadBroker: boolean;
      brokerName: string | null;
      /** Format: date-time */
      closeDate: string | null;
      dealOption?: components["schemas"]["DealOptionDto"];
      keyDate?: components["schemas"]["DealDateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailDto"];
      documents: (components["schemas"]["Deal180UnlistedDocumentDto"])[];
    };
    Deal180PlacementDocumentDto: {
      /** @enum {string} */
      type: "TermSheets";
      dealDocument: components["schemas"]["DealDocumentDto"];
    };
    Deal180PlacementDto: {
      capitalRaisePrice: number;
      lastTradedPrice: number | null;
      marketCap: number | null;
      discountPercentage: number | null;
      valueToBroker: number;
      summary: string | null;
      optionCode: string | null;
      dealOption?: components["schemas"]["DealOptionDto"];
      keyDate?: components["schemas"]["DealDateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailDto"];
      documents: (components["schemas"]["Deal180PlacementDocumentDto"])[];
    };
    DealMarketPlacementDto: {
      lastTradedPrice: number | null;
    };
    DealInvestorGroupDto: {
      investorGroup: components["schemas"]["InvestorGroupDto"];
    };
    DealLogsDto: {
      /** @enum {string} */
      event: "DealCreated" | "BidPlaced" | "BidsClosed" | "DealComplete";
      id: string;
      /** Format: date-time */
      createdAt: string;
    };
    BidEntityBidDto: {
      investmentAmount: number;
      investorEntityId: string;
      isAllocated: boolean;
    };
    BidDto: {
      id: string;
      dealId: string;
      entityBids: (components["schemas"]["BidEntityBidDto"])[];
    };
    DealAllocationKeyDateDto: {
      /** Format: date-time */
      settlementDate: string;
      /** Format: date-time */
      acceptanceDate: string;
      /** Format: date-time */
      allotmentDate: string;
    };
    DealAllocationSettlementDvpDto: {
      code: string;
      isin: string;
    };
    DealAllocationSettlementTransferDto: {
      /** Format: date-time */
      paymentDueDate: string;
      detail: string | null;
    };
    DealAllocationSettlementDto: {
      /** @enum {string} */
      type: "Dvp" | "FundTransfer" | "InternalTransfer";
      dvpDetail: components["schemas"]["DealAllocationSettlementDvpDto"] | null;
      transferDetail: components["schemas"]["DealAllocationSettlementTransferDto"] | null;
    };
    DealAllocationDualTrancheDto: {
      firstTranche: number;
      secondTranche: number;
    };
    DealAllocationDto: {
      receivedAmount: number;
      brokerName: string;
      isVisible: boolean;
      isHotAllocation: boolean;
      keyDate: components["schemas"]["DealAllocationKeyDateDto"];
      settlement: components["schemas"]["DealAllocationSettlementDto"];
      dualTranche: components["schemas"]["DealAllocationDualTrancheDto"];
    };
    DealDto: {
      /** @enum {string} */
      type: "Placement" | "MarketPlacement" | "Ipo" | "UnlistedInvestment";
      id: string;
      /** Format: date-time */
      createdAt: string;
      number: string;
      isActive: boolean;
      company: components["schemas"]["CompanyDto"];
      dealInformationDocuments: (components["schemas"]["DealInformationDocumentDto"])[];
      behindWallDeal?: components["schemas"]["DealBehindWallDto"] | null;
      ipoDeal?: components["schemas"]["Deal180IpoDto"];
      unlistedDeal?: components["schemas"]["Deal180UnlistedDto"];
      placementDeal?: components["schemas"]["Deal180PlacementDto"];
      marketPlacementDeal?: components["schemas"]["DealMarketPlacementDto"];
      dealInvestorGroups: (components["schemas"]["DealInvestorGroupDto"])[];
      logs?: (components["schemas"]["DealLogsDto"])[];
      bids: (components["schemas"]["BidDto"])[];
      allocation: components["schemas"]["DealAllocationDto"] | null;
    };
    DealBehindWallUpdateDto: {
      documents?: (components["schemas"]["DealBehindWallDocumentCreateDto"])[];
      detail?: string | null;
      terms?: string | null;
      isActive?: boolean;
    };
    DealOptionUpdateDto: {
      exercisePrice?: number | null;
      numerator?: number | null;
      denominator?: number | null;
      /** Format: date-time */
      expiresAt?: string | null;
      detail?: string | null;
    };
    DealExtraDetailUpdateDto: {
      minimumBid?: number | null;
      companyDescription?: string | null;
      investmentHighlights?: string | null;
      summaryContinued?: string | null;
      useProceeds?: string | null;
    };
    DealDateUpdateDto: {
      /** Format: date-time */
      bidDate?: string | null;
      /** Format: date-time */
      bidTime?: string | null;
      /** Format: date-time */
      settlementDate?: string | null;
    };
    Deal180IpoUpdateDto: {
      ipoPrice?: number | null;
      ipoRaiseAmount?: number | null;
      marketCap?: number | null;
      valueToBroker?: number;
      dealOption?: components["schemas"]["DealOptionUpdateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailUpdateDto"];
      keyDate?: components["schemas"]["DealDateUpdateDto"];
      documents?: (components["schemas"]["Deal180IpoDocumentCreateDto"])[];
      summary?: string | null;
      hasLeadBroker?: boolean;
      brokerName?: string | null;
      /** Format: date-time */
      listingDate?: string | null;
      /** Format: date-time */
      closeDate?: string | null;
    };
    Deal180PlacementUpdateDto: {
      capitalRaisePrice?: number;
      lastTradedPrice?: number | null;
      marketCap?: number | null;
      discountPercentage?: number | null;
      valueToBroker?: number;
      dealOption?: components["schemas"]["DealOptionUpdateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailUpdateDto"];
      keyDate?: components["schemas"]["DealDateUpdateDto"];
      documents?: (components["schemas"]["Deal180PlacementDocumentCreateDto"])[];
      summary?: string | null;
      optionCode?: string | null;
    };
    Deal180UnlistedUpdateDto: {
      preIpoPrice?: number;
      preIpoRaiseAmount?: number;
      valuation?: number | null;
      valueToBroker?: number;
      dealOption?: components["schemas"]["DealOptionUpdateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailUpdateDto"];
      keyDate?: components["schemas"]["DealDateUpdateDto"];
      documents?: (components["schemas"]["Deal180UnlistedDocumentCreateDto"])[];
      summary?: string | null;
      hasLeadBroker?: boolean;
      brokerName?: string | null;
      /** Format: date-time */
      closeDate?: string | null;
    };
    DealMarketPlacementUpdateDto: {
      lastTradedPrice?: number | null;
    };
    DealUpdateDto: {
      /** @description It is not possible to delete or change a deal to "behind the wall" */
      behindWallDeal?: components["schemas"]["DealBehindWallUpdateDto"];
      companyId?: string;
      dealInformationDocuments?: (components["schemas"]["DealInformationDocumentCreateDto"])[];
      dealInvestorGroups?: (components["schemas"]["DealInvestorGroupCreateDto"])[];
      ipoDeal?: components["schemas"]["Deal180IpoUpdateDto"];
      placementDeal?: components["schemas"]["Deal180PlacementUpdateDto"];
      unlistedDeal?: components["schemas"]["Deal180UnlistedUpdateDto"];
      marketPlacementDeal?: components["schemas"]["DealMarketPlacementUpdateDto"];
      isActive?: boolean;
    };
    DealListBehindWallAdminResultDto: {
      detail: string | null;
      terms: string | null;
      isActive: boolean;
    };
    DealAdminResultDto: {
      /** @enum {string} */
      type: "Placement" | "MarketPlacement" | "Ipo" | "UnlistedInvestment";
      behindWallDeal: components["schemas"]["DealListBehindWallAdminResultDto"];
      id: string;
      /** Format: date-time */
      createdAt: string;
      number: string;
      isActive: boolean;
      company: components["schemas"]["CompanyDto"];
      logs?: (components["schemas"]["DealLogsDto"])[];
      bids: (components["schemas"]["BidDto"])[];
      allocation: components["schemas"]["DealAllocationDto"] | null;
    };
    DealListAdminResultDto: {
      data: (components["schemas"]["DealAdminResultDto"])[];
      pagination: components["schemas"]["ResultPaginationDetailDto"];
    };
    DealListInvestorRequestDto: {
      /** @description Search by company name, ASX company, or deal number */
      filter?: string;
      /**
       * @description Filter for only the specified deal type 
       * @enum {string}
       */
      type?: "Placement" | "MarketPlacement" | "Ipo" | "UnlistedInvestment";
      /** @description Array of deal events that have to match with the latest log */
      logCurrentEvent?: ("DealCreated" | "BidsClosed" | "DealComplete")[];
      /** @description Filter for deals whether they have been bidden by the investor. It is applied with "investorId" filter */
      hasBidden?: boolean;
      /** @description Returns all deals that the investor is interested in. It is applied with "investorId" filter */
      isInterestedBidder?: boolean;
      page: number;
      perPage: number;
    };
    DealInvestorBidInvestorEntitiesResultDto: {
      investmentAmount: number;
      investorEntityId: string;
      isAllocated: boolean;
      investorEntity: components["schemas"]["InvestorEntityDto"];
    };
    DealInvestorBidResultDto: {
      entityBids: (components["schemas"]["DealInvestorBidInvestorEntitiesResultDto"])[];
      id: string;
      dealId: string;
    };
    DealInvestor180IpoResult: {
      ipoPrice: number | null;
      ipoRaiseAmount: number | null;
      marketCap: number | null;
      summary: string | null;
      hasLeadBroker: boolean;
      brokerName: string | null;
      /** Format: date-time */
      listingDate: string | null;
      /** Format: date-time */
      closeDate: string | null;
      dealOption?: components["schemas"]["DealOptionDto"];
      keyDate?: components["schemas"]["DealDateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailDto"];
      documents: (components["schemas"]["Deal180IpoDocumentDto"])[];
    };
    DealInvestor180PlacementResult: {
      capitalRaisePrice: number;
      lastTradedPrice: number | null;
      marketCap: number | null;
      discountPercentage: number | null;
      summary: string | null;
      optionCode: string | null;
      dealOption?: components["schemas"]["DealOptionDto"];
      keyDate?: components["schemas"]["DealDateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailDto"];
      documents: (components["schemas"]["Deal180PlacementDocumentDto"])[];
    };
    DealInvestor180UnlistedResult: {
      preIpoPrice: number;
      preIpoRaiseAmount: number;
      valuation: number | null;
      summary: string | null;
      hasLeadBroker: boolean;
      brokerName: string | null;
      /** Format: date-time */
      closeDate: string | null;
      dealOption?: components["schemas"]["DealOptionDto"];
      keyDate?: components["schemas"]["DealDateDto"];
      extraDetail?: components["schemas"]["DealExtraDetailDto"];
      documents: (components["schemas"]["Deal180UnlistedDocumentDto"])[];
    };
    DealInvestorResultDto: {
      /** @enum {string} */
      type: "Placement" | "MarketPlacement" | "Ipo" | "UnlistedInvestment";
      bids: (components["schemas"]["DealInvestorBidResultDto"])[];
      ipoDeal: components["schemas"]["DealInvestor180IpoResult"];
      placementDeal: components["schemas"]["DealInvestor180PlacementResult"];
      unlistedDeal: components["schemas"]["DealInvestor180UnlistedResult"];
      id: string;
      /** Format: date-time */
      createdAt: string;
      number: string;
      isActive: boolean;
      company: components["schemas"]["CompanyDto"];
      dealInformationDocuments: (components["schemas"]["DealInformationDocumentDto"])[];
      behindWallDeal?: components["schemas"]["DealBehindWallDto"] | null;
      marketPlacementDeal?: components["schemas"]["DealMarketPlacementDto"];
      dealInvestorGroups: (components["schemas"]["DealInvestorGroupDto"])[];
      logs?: (components["schemas"]["DealLogsDto"])[];
    };
    DealListInvestorResultDto: {
      data: (components["schemas"]["DealInvestorResultDto"])[];
      pagination: components["schemas"]["ResultPaginationDetailDto"];
    };
    DealRetrieveInvestorDto: {
      /** @enum {string} */
      type: "Placement" | "MarketPlacement" | "Ipo" | "UnlistedInvestment";
      id: string;
      /** Format: date-time */
      createdAt: string;
      number: string;
      isActive: boolean;
      company: components["schemas"]["CompanyDto"];
      dealInformationDocuments: (components["schemas"]["DealInformationDocumentDto"])[];
      behindWallDeal?: components["schemas"]["DealBehindWallDto"] | null;
      ipoDeal?: components["schemas"]["Deal180IpoDto"];
      unlistedDeal?: components["schemas"]["Deal180UnlistedDto"];
      placementDeal?: components["schemas"]["Deal180PlacementDto"];
      marketPlacementDeal?: components["schemas"]["DealMarketPlacementDto"];
      dealInvestorGroups: (components["schemas"]["DealInvestorGroupDto"])[];
      logs?: (components["schemas"]["DealLogsDto"])[];
      bids: (components["schemas"]["BidDto"])[];
    };
    DealMarketPlacementInterestedBidderDto: {
      marketPlacementDealId: string;
      investorId: string;
    };
    BidPlaceLog: {
      id: string;
      dealId: string;
    };
    DealLogPlaceLogDto: {
      bid: components["schemas"]["BidPlaceLog"];
    };
    DealLogDto: {
      /** @enum {string} */
      event: "DealCreated" | "BidPlaced" | "BidsClosed" | "DealComplete";
      id: string;
      dealId: string;
      /** Format: date-time */
      createdAt: string;
      placeLog: components["schemas"]["DealLogPlaceLogDto"] | null;
    };
    DealLogListResultDto: {
      data: (components["schemas"]["DealLogDto"])[];
      pagination: components["schemas"]["ResultPaginationDetailDto"];
    };
    BidEntityBidCreateDto: {
      investmentAmount: number;
      investorEntityId: string;
    };
    BidInvestorCreateDto: {
      entityBids: (components["schemas"]["BidEntityBidCreateDto"])[];
    };
    BidAdminCreateDto: {
      entityBids: (components["schemas"]["BidEntityBidCreateDto"])[];
    };
    BidAdminUpdateDto: {
      entityBids: (components["schemas"]["BidEntityBidCreateDto"])[];
    };
    DealInboxDto: {
      /** @enum {string} */
      type: "Placement" | "MarketPlacement" | "Ipo" | "UnlistedInvestment";
      id: string;
      /** Format: date-time */
      createdAt: string;
      isActive: boolean;
      number: string;
      behindWallDeal?: components["schemas"]["DealBehindWallDto"] | null;
      logs?: (components["schemas"]["DealLogsDto"])[];
      bids: (components["schemas"]["BidDto"])[];
    };
    InvestorInboxResponseDto: {
      data: (components["schemas"]["DealInboxDto"])[];
      pagination: components["schemas"]["ResultPaginationDetailDto"];
    };
    DealAllocationKeyDateCreateDto: {
      /** Format: date-time */
      settlementDate: string;
      /** Format: date-time */
      acceptanceDate: string;
      /** Format: date-time */
      allotmentDate: string;
    };
    DealAllocationSettlementDvpCreateDto: {
      code: string;
      isin: string;
    };
    DealAllocationSettlementTransferCreateDto: {
      /** Format: date-time */
      paymentDueDate: string;
      detail: string | null;
    };
    DealAllocationSettlementCreateDto: {
      /** @enum {string} */
      type: "Dvp" | "FundTransfer" | "InternalTransfer";
      dvpDetail?: components["schemas"]["DealAllocationSettlementDvpCreateDto"];
      transferDetail?: components["schemas"]["DealAllocationSettlementTransferCreateDto"];
    };
    BidEntityBidAllocationDto: {
      investmentAmount: number;
      investorEntityId: string;
      isAllocated: boolean;
    };
    BidAllocationDto: {
      entityBids: (components["schemas"]["BidEntityBidAllocationDto"])[];
      id: string;
    };
    DealAllocationCreateDto: {
      receivedAmount: number;
      dualTranche?: components["schemas"]["DealAllocationDualTrancheDto"];
      keyDate: components["schemas"]["DealAllocationKeyDateCreateDto"];
      settlement: components["schemas"]["DealAllocationSettlementCreateDto"];
      bids: (components["schemas"]["BidAllocationDto"])[];
      brokerName: string;
      isVisible: boolean;
      isHotAllocation: boolean;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  AppGetHello: {
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
    };
  };
  HealthCheckCheck: {
    responses: {
      /** @description The Health Check is successful */
      200: {
        content: {
          "application/json": {
            /** @example ok */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: ({
              [key: string]: ({
                status?: string;
                [key: string]: string | undefined;
              }) | undefined;
            }) | null;
            /** @example {} */
            error?: ({
              [key: string]: ({
                status?: string;
                [key: string]: string | undefined;
              }) | undefined;
            }) | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            details?: {
              [key: string]: ({
                status?: string;
                [key: string]: string | undefined;
              }) | undefined;
            };
          };
        };
      };
      /** @description The Health Check is not successful */
      503: {
        content: {
          "application/json": {
            /** @example error */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: ({
              [key: string]: ({
                status?: string;
                [key: string]: string | undefined;
              }) | undefined;
            }) | null;
            /**
             * @example {
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            error?: ({
              [key: string]: ({
                status?: string;
                [key: string]: string | undefined;
              }) | undefined;
            }) | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   },
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            details?: {
              [key: string]: ({
                status?: string;
                [key: string]: string | undefined;
              }) | undefined;
            };
          };
        };
      };
    };
  };
  AuthAdminCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminCreateDto"];
      };
    };
    responses: {
      201: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AuthAdminLoginFirstStep: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminLoginDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["UserPhoneNumberDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AuthAdminLoginSecondStep: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TwoFactorAuthenticationDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["AdminLoginSecondStepDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AuthAdminMe: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["AdminDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorAuthSignUpFirstStep: {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: never;
      409: never;
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorAuthSignUpSecondStep: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["InvestorSignInResultDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorAuthSignIn: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorSignInDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["InvestorSignInResultDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorAuthRetrieveAccount: {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorAuthConfirmRetrieve: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorSetNewPasswordDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorAuthGetMe: {
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorList: {
    parameters: {
      query: {
        investorType?: "brokerInvestor" | "individualInvestor";
        /** @description Applied when 'addDealId' is provided. Indicates to retrieve all investors, whether they have accepted behind-wall terms. */
        hasAcceptedBehindWallTerm?: boolean;
        /** @description Applied when 'addDealId' is provided. Retrieves investors where their bid has been allocated or not. */
        isAllocatedBid?: boolean;
        filter?: string;
        addInvestorGroupId?: string;
        excludeInvestorGroupId?: string;
        addDealId?: string;
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorListAdminResultDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorFindOne: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorUpdate: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorAdminUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  FileUploadImage: {
    parameters: {
      query: {
        /** @description File name */
        fileName: string;
        /** @description Folder */
        folder: "documents" | "profiles";
      };
      path: {
        rootFolder: "images" | "videos" | "other";
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
      default: {
        content: {
          "application/json": components["schemas"]["FileResponseDto"];
        };
      };
    };
  };
  FileDownloadResize: {
    parameters: {
      query: {
        fileName: string;
        width?: number;
        height?: number;
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  FileDownload: {
    parameters: {
      query: {
        fileName: string;
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  IndividualInvestorUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["IndividualInvestorUpdateDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminIndividualInvestorChangeSiDocumentStatus: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IndividualInvestorAdminUpdateDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminIndividualInvestorAskForDocuments: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["IndividualInvestorAskDocumentsDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  BrokerInvestorUpdate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["BrokerInvestorUpdateDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminBrokerInvestorUpdateAfslFormStatus: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BrokerInvestorAdminUpdateDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminBrokerInvestorAskForDocuments: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BrokerInvestorAskDocumentsDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorEntityCreate: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorEntityCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["InvestorEntityDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorEntityUpdate: {
    parameters: {
      path: {
        investorId: string;
        entityId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorEntityUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorEntityDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorEntityCreate: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorEntityAdminCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["InvestorEntityDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorEntityUpdate: {
    parameters: {
      path: {
        investorId: string;
        entityId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvestorEntityAdminUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorEntityDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminCompanyList: {
    parameters: {
      query: {
        /** @description Filter with (true) or without (false) asx companies. Null/Undefined to ignore this filter */
        isAsxCompany?: 0 | 1;
        name?: string;
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["CompanyListResultDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  adminCompanyCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyCreateDto"];
      };
    };
    responses: {
      201: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminCompanyGetById: {
    parameters: {
      path: {
        companyId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": string;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminCompanyUpdate: {
    parameters: {
      path: {
        companyId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CompanyUpdateDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorGroupList: {
    parameters: {
      query: {
        name?: string;
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorGroupListResultDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorGroupCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminCreateInvestorGroupDto"];
      };
    };
    responses: {
      201: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorGroupAddInvestor: {
    parameters: {
      path: {
        investorGroupId: string;
        investorId: string;
      };
    };
    responses: {
      201: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorGroupRemoveInvestor: {
    parameters: {
      path: {
        investorGroupId: string;
        investorId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorGroupGet: {
    parameters: {
      path: {
        investorGroupId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorGroupDelete: {
    parameters: {
      path: {
        investorGroupId: string;
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminInvestorGroupUpdate: {
    parameters: {
      path: {
        investorGroupId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AdminUpdateInvestorGroupDto"];
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminDealList: {
    parameters: {
      query: {
        /** @description The ID of the company to retrieve all its deals */
        companyId?: string;
        /** @description Search by company name */
        filter?: string;
        /** @description Filter for only the specified deal type */
        type?: "Placement" | "MarketPlacement" | "Ipo" | "UnlistedInvestment";
        /** @description The ID of the investor */
        investorId?: string;
        /** @description Filter for deals whether they have been bidden by the investor. It is applied with "investorId" filter */
        hasBidden?: boolean;
        /** @description Returns all deals that the investor is interested in. It is applied with "investorId" filter */
        isInterestedBidder?: boolean;
        page: number;
        perPage: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealListAdminResultDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminDealCreate: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DealCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DealDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminDealGetById: {
    parameters: {
      path: {
        dealId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminDealUpdate: {
    parameters: {
      path: {
        dealId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DealUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminDealCloseBids: {
    parameters: {
      path: {
        dealId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorDealList: {
    parameters: {
      path: {
        investorId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DealListInvestorRequestDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["DealListInvestorResultDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorDealFind: {
    parameters: {
      path: {
        dealId: string;
        investorId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealRetrieveInvestorDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorDealSubmitInterest: {
    parameters: {
      path: {
        dealId: string;
        investorId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealMarketPlacementInterestedBidderDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  AdminDealLogList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
      path: {
        dealId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealLogListResultDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  BidCreate: {
    parameters: {
      path: {
        investorId: string;
        dealId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BidInvestorCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BidDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  BidAdminCreate: {
    parameters: {
      path: {
        investorId: string;
        dealId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BidAdminCreateDto"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["BidDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  BidAdminUpdate: {
    parameters: {
      path: {
        investorId: string;
        dealId: string;
        bidId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BidAdminUpdateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BidDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  BidAdminDelete: {
    parameters: {
      path: {
        investorId: string;
        dealId: string;
        bidId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["BidDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorInboxList: {
    parameters: {
      query: {
        page: number;
        perPage: number;
      };
      path: {
        investorId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["InvestorInboxResponseDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  InvestorInboxAcceptTerms: {
    parameters: {
      path: {
        investorId: string;
        dealId: string;
      };
    };
    responses: {
      200: never;
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  DealAllocationFindOne: {
    parameters: {
      path: {
        dealId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealAllocationDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
  DealAllocationCreate: {
    parameters: {
      path: {
        dealId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DealAllocationCreateDto"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["DealAllocationDto"];
        };
      };
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponseBadRequestFromPipeDto"];
        };
      };
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaNotFoundDto"];
        };
      };
      409: {
        content: {
          "application/json": components["schemas"]["ErrorResponsePrismaConflictDto"];
        };
      };
      500: {
        content: {
          "application/json": components["schemas"]["ErrorResponseInternalServerErrorDto"];
        };
      };
    };
  };
}
